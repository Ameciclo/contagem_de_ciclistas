version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: ameciclo/contage
    docker:
      - image: circleci/buildpack-deps:stretch
orbs:
  node: circleci/node@4.4.0

workflow:
  build-latest:
    jobs:
      - checkout
      - lint
        requires:
          - checkout
      - test:
          requires:
            - checkout
      - build:
          requires:
            - lint
            - test
      - docker-build:
          requires:
            - build
          filters:
            branches:
              only: main
      - publish-latest:
          requires:
            - docker-build
          filters:
            branches:
              only: main
  
  build-tags:
    jobs:
      - docker-build:
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
      - publish-tag:
          requires:
            - docker-build
          filters:
            tags:
              only: /^v.*/
          branches:
            ignore: /.*/

jobs:
  checkout:
    working_directory: ~/contagem_de_ciclistas
    docker:
      - image: node:15.14.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - node/install-packages:
          pkg-manager: npm
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: ~/contagem_de_ciclistas
          paths: 
            - .

  lint:
    working_directory: ~/contagem_de_ciclistas
    docker:
      - image: node:15.14.0
    steps:
      - attach_workspace:
          at: ~/contagem_de_ciclistas
      - run:
          name: Run linter
          command: 'npm run lint'

  test:
    working_directory: ~/contagem_de_ciclistas
    docker:
      - image: node:15.14.0
        environment:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 27017
          TEST_DB_USERNAME: test
          TEST_DB_PASSWORD: test
          TEST_DB_NAME: test
          NODE_ENV: test
      - image: mongo:4.2.0
        environment:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
    steps:
      - attach_workspace:
          at: ~/contagem_de_ciclistas
      - run:
          name: Run tests
          command: 'npm run test:ci'
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit

  build:
    working_directory: ~/contagem_de_ciclistas
    docker:
      - image: node:15.14.0
    steps:
      - attach_workspace:
          at: ~/contagem_de_ciclistas
      - run:
          name: Run build
          command: 'npm run build'

  docker-build:
    working_directory: ~/contagem_de_ciclistas
    executor: docker-publisher
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/contagem_de_ciclistas
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG      